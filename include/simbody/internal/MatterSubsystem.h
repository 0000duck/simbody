#ifndef SimTK_MATTER_SUBSYSTEM_H_
#define SimTK_MATTER_SUBSYSTEM_H_

/* Portions copyright (c) 2005-6 Stanford University and Michael Sherman.
 * Contributors:
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish, 
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject
 * to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
 * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include "SimTKcommon.h"
#include "simbody/internal/common.h"
#include "simbody/internal/State.h"
#include "simbody/internal/Subsystem.h"

namespace SimTK {

/// The still-abstract parent of all MatterSubsystems (such as the
/// one generated by Simbody). This is derived from Subsystem.
class SimTK_SIMBODY_API MatterSubsystem : public Subsystem {
public:
    MatterSubsystem() { }

    // Topological information (no state)
    int getNBodies()      const;    // includes ground, also # mobilizers+1
    int getNParticles()   const;
    int getNMobilities()  const;
    int getNConstraints() const;    // i.e., constraint elements (multiple equations)

    int        getParent  (int bodyNum) const;
    Array<int> getChildren(int bodyNum) const;

    const Transform&  getJointFrame(const State&, int bodyNum) const;
    const Transform&  getJointFrameOnParent(const State&, int bodyNum) const;

    const Real& getBodyMass(const State&, int bodyNum) const;
    const Vec3& getBodyCenterOfMass(const State&, int bodyNum) const;

    const Vector& getParticleMasses(const State&) const;


    // This can be called at any time after construction. It sizes a set of
    // force arrays (if necessary) and then sets them to zero. The "addIn"
    // operators below can then be used to accumulate forces.
    void resetForces(Vector_<SpatialVec>& bodyForces,
                     Vector_<Vec3>&       particleForces,
                     Vector&              mobilityForces) const 
    {
        bodyForces.resize(getNBodies()); bodyForces.setToZero();
        particleForces.resize(0); // TODO
        mobilityForces.resize(getNMobilities()); mobilityForces.setToZero();
    }


    /// Add in gravity to a body forces vector. Be sure to call this only once
    /// per evaluation! Must be realized to Configured stage prior to call.
    void addInGravity(const State&, const Vec3& g, Vector_<SpatialVec>& bodyForces) const;

    /// Apply a force to a point on a body (a station). Provide the
    /// station in the body frame, force in the ground frame. Must
    /// be realized to Configured stage prior to call.
    void addInPointForce(const State&, int body, const Vec3& stationInB, 
                         const Vec3& forceInG, Vector_<SpatialVec>& bodyForces) const;

    /// Apply a torque to a body. Provide the torque vector in the
    /// ground frame.
    void addInBodyTorque(const State&, int body, const Vec3& torqueInG, 
                         Vector_<SpatialVec>& bodyForces) const;

    /// Apply a scalar joint force or torque to an axis of the
    /// indicated body's inboard joint.
    void addInMobilityForce(const State&, int body, int axis, const Real& f,
                            Vector& mobilityForces) const;

    // Kinematic information.
    const Transform&  getBodyConfiguration(const State&, int bodyNum) const;
    const SpatialVec& getBodyVelocity(const State&, int bodyNum) const;

    const Real& getJointQ(const State&, int body, int axis) const;
    const Real& getJointU(const State&, int body, int axis) const;

    void setJointQ(State&, int body, int axis, const Real&) const;
    void setJointU(State&, int body, int axis, const Real&) const;

    /// At stage Configured or higher, return the cross-mobilizer transform.
    /// This is X_JbJ, the body's inboard mobilizer frame J measured and expressed in
    /// the parent body's corresponding outboard frame Jb.
    const Transform& getMobilizerConfiguration(const State&, int body) const;

    /// At stage Moving or higher, return the cross-mobilizer velocity.
    /// This is V_JbJ, the relative velocity of the body's inboard mobilizer
    /// frame J in the parent body's corresponding outboard frame Jb, 
    /// measured and expressed in Jb. This is NOT a spatial velocity!
    const SpatialVec& getMobilizerVelocity(const State&, int body) const;

    /// This is a solver which sets the body's mobilizer transform as close
    /// as possible to the supplied Transform. The degree to which this is
    /// possible depends of course on the mobility provided by this body's
    /// mobilizer. However, no error will occur; on return the coordinates
    /// for this mobilizer will be as close as we can get them. Note: this
    /// has no effect on any coordinates except the q's for this mobilizer.
    /// You can call this solver at Stage::Modeled or higher; it will
    /// leave you no higher than Stage::Timed since it changes the configuration.
    void setMobilizerConfiguration(State&, int body, const Transform& X_JbJ) const;

    /// This is a solver which sets the body's cross-mobilizer velocity as close
    /// as possible to the supplied angular and linear velocity. The degree to which this is
    /// possible depends of course on the mobility provided by this body's
    /// mobilizer. However, no error will occur; on return the velocity coordinates
    /// (u's) for this mobilizer will be as close as we can get them. Note: this
    /// has no effect on any coordinates except the u's for this mobilizer.
    /// You can call this solver at Stage::Modeled or higher; it will
    /// leave you no higher than Stage::Configured since it changes the velocities.
    void setMobilizerVelocity(State&, int body, const SpatialVec& V_JbJ) const;


    /// This is available at Stage::Configured. These are *absolute* constraint
    /// violations qerr=g(t,q), that is, they are unweighted.
    const Vector& getQConstraintErrors(const State&) const;

    /// This is the weighted norm of the errors returned by getQConstraintErrors(),
    /// available whenever this subsystem has been realized to Stage::Configured.
    /// This is the scalar quantity that we need to keep below "tol"
    /// during integration.
    Real calcQConstraintNorm(const State&) const;

    /// This is available at Stage::Moving. These are *absolute* constraint
    /// violations verr=v(t,q,u), that is, they are unweighted.
    const Vector& getUConstraintErrors(const State&) const;

    /// This is the weighted norm of the errors returned by getUConstraintErrors().
    /// That is, this is the scalar quantity that we need to keep below "tol"
    /// during integration.
    Real calcUConstraintNorm(const State&) const;

    /// This is available at Stage::Reacting. These are *absolute* constraint
    /// violations aerr = A udot - b, that is, they are unweighted.
    const Vector& getUDotConstraintErrors(const State&) const;

    /// This is the weighted norm of the errors returned by getUDotConstraintErrors().
    Real calcUDotConstraintNorm(const State&) const;

    /// This is a solver you can call after the State has been realized
    /// to stage Timed (i.e., Configured-1). It will project the Q constraints
    /// along the error norm so that getQConstraintNorm() <= tol, and will
    /// project out the corresponding component of y_err so that y_err's Q norm
    /// is reduced. Returns true if it does anything at all to State or y_err.
    bool projectQConstraints(State&, Vector& y_err, Real tol, Real targetTol) const;

    /// This is a solver you can call after the State has been realized
    /// to stage Configured (i.e., Moving-1). It will project the U constraints
    /// along the error norm so that getUConstraintNorm() <= tol, and will
    /// project out the corresponding component of y_err so that y_err's U norm
    /// is reduced.
    bool projectUConstraints(State&, Vector& y_err, Real tol, Real targetTol) const;

    SimTK_PIMPL_DOWNCAST(MatterSubsystem, Subsystem);
    class MatterSubsystemRep& updRep();
    const MatterSubsystemRep& getRep() const;
};

} // namespace SimTK

#endif // SimTK_MATTER_SUBSYSTEM_H_
