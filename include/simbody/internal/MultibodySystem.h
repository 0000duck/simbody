#ifndef SimTK_SIMBODY_MULTIBODY_SYSTEM_H_
#define SimTK_SIMBODY_MULTIBODY_SYSTEM_H_

/* Copyright (c) 2006 Stanford University and Michael Sherman.
 * Contributors:
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish, 
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject
 * to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS, CONTRIBUTORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include "SimTKcommon.h"
#include "simbody/internal/common.h"
#include "simbody/internal/State.h"
#include "simbody/internal/System.h"

#include <vector>

namespace SimTK {

class AnalyticGeometry;
class DecorativeGeometry;

class MechanicalForcesSubsystem;

/// The still-abstract parent of all MechanicalSubsystems (such as the
/// one generated by Simbody). This is derived from Subsystem.
class SimTK_SIMBODY_API MechanicalSubsystem : public Subsystem {
public:
    MechanicalSubsystem() { }

    // Topological information (no state)
    int getNBodies()      const;    // includes ground, also # tree joints+1
    int getNMobilities()  const;
    int getNConstraints() const;    // i.e., constraint elements (multiple equations)

    int        getParent  (int bodyNum) const;
    Array<int> getChildren(int bodyNum) const;

    const Transform&  getJointFrame(const State&, int bodyNum) const;
    const Transform&  getJointFrameOnParent(const State&, int bodyNum) const;

    const Vec3&       getBodyCenterOfMass(const State&, int bodyNum) const;

    // Kinematic information.
    const Transform&  getBodyConfiguration(const State&, int bodyNum) const;
    const SpatialVec& getBodyVelocity(const State&, int bodyNum) const;

    const Real& getJointQ(const State&, int body, int axis) const;
    const Real& getJointU(const State&, int body, int axis) const;

    void setJointQ(State&, int body, int axis, const Real&) const;
    void setJointU(State&, int body, int axis, const Real&) const;

    /// This is available at Stage::Configured. These are *absolute* constraint
    /// violations qerr=g(t,q), that is, they are unweighted.
    const Vector& getQConstraintErrors(const State&) const;

    /// This is the weighted norm of the errors returned by getQConstraintErrors(),
    /// available whenever this subsystem has been realized to Stage::Configured.
    /// This is the scalar quantity that we need to keep below "tol"
    /// during integration.
    const Real&   getQConstraintNorm(const State&) const;

    /// This is available at Stage::Moving. These are *absolute* constraint
    /// violations verr=v(t,q,u), that is, they are unweighted.
    const Vector& getUConstraintErrors(const State&) const;

    /// This is the weighted norm of the errors returned by getQConstraintErrors().
    /// That is, this is the scalar quantity that we need to keep below "tol"
    /// during integration.
    const Real&   getUConstraintNorm(const State&) const;

    /// This is a solver you can call after the State has been realized
    /// to stage Timed (i.e., Configured-1). It will project the Q constraints
    /// along the error norm so that getQConstraintNorm() <= tol, and will
    /// project out the corresponding component of y_err so that y_err's Q norm
    /// is reduced. Returns true if it does anything at all to State or y_err.
    bool projectQConstraints(State&, Vector& y_err, Real tol, Real targetTol) const;

    /// This is a solver you can call after the State has been realized
    /// to stage Configured (i.e., Moving-1). It will project the U constraints
    /// along the error norm so that getUConstraintNorm() <= tol, and will
    /// project out the corresponding component of y_err so that y_err's U norm
    /// is reduced.
    bool projectUConstraints(State&, Vector& y_err, Real tol, Real targetTol) const;

    SimTK_PIMPL_DOWNCAST(MechanicalSubsystem, Subsystem);
private:
    class MechanicalSubsystemRep& updRep();
    const MechanicalSubsystemRep& getRep() const;
};

class SimTK_SIMBODY_API MechanicalForcesSubsystem : public Subsystem {
public:
    MechanicalForcesSubsystem() { }

    SimTK_PIMPL_DOWNCAST(MechanicalForcesSubsystem, Subsystem);
private:
    class MechanicalForcesSubsystemRep& updRep();
    const MechanicalForcesSubsystemRep& getRep() const;
};


/**
 * The job of the MultibodySystem class is to coordinate the activities of various
 * subsystems which can be part of a multibody system. We insist on having exactly one
 * MechanicalSubsystem, and we would like also to have:
 *    - a ForceSubsystem
 *    - an AnalyticGeometrySubsystem
 *    - a MassPropertiesSubsystem
 *    - a VisualizationSubsystem
 * There will also be a generic System-level "subsystem" for global variables.
 */
class SimTK_SIMBODY_API MultibodySystem : public System {
public:
    MultibodySystem();
    MultibodySystem(MechanicalSubsystem& m, MechanicalForcesSubsystem& f);

    // We inherit realize() from System, and add constraint projection here.
    // We are given a state whose continuous state variables y may violate
    // a set of constraints at position (q) and velocity (u) levels. In addition
    // we may be given a set of absolute error estimates y_err for y. This solver
    // performs two operations:
    //   (1) perform a least squares projection of y onto the constraint manifold,
    //       using the error test norm to define the least-squares direction
    //   (2) perform the same projection on y_err, returning a revised y_err which
    //       has a smaller norm
    // This routine returns true if any change was made to s or y_err, otherwise false.
    // 

    bool project(State& s, Vector& y_err, 
                 const Real& tol,               // must achieve this tolerance or better
                 const Real& dontProjectFac,    // skip projection if tol <= fac*tol
                 const Real& targetTol          // when projecting, try for this (<= tol)
                 ) const;

    // Steals ownership of the source.
    MechanicalSubsystem&       setMechanicalSubsystem(MechanicalSubsystem&);
    MechanicalForcesSubsystem& setMechanicalForcesSubsystem(MechanicalForcesSubsystem&);

    const MechanicalSubsystem&       getMechanicalSubsystem()       const;
    const MechanicalForcesSubsystem& getMechanicalForcesSubsystem() const;
    MechanicalSubsystem&             updMechanicalSubsystem();
    MechanicalForcesSubsystem&       updMechanicalForcesSubsystem();

    // TODO: camera facing, screen fixed, calculated geometry (e.g. line between stations
    // on two different bodies, marker at system COM)
    void addAnalyticGeometry  (int body, const Transform& X_BG, const AnalyticGeometry&);
    void addDecorativeGeometry(int body, const Transform& X_BG, const DecorativeGeometry&);
    const Array<AnalyticGeometry>&   getBodyAnalyticGeometry(int body);
    const Array<DecorativeGeometry>& getBodyDecorativeGeometry(int body);

    SimTK_PIMPL_DOWNCAST(MultibodySystem, System);
};

class SimTK_SIMBODY_API MultibodyDynamicsStudy : public Study {
public:
    MultibodyDynamicsStudy() { }
    MultibodyDynamicsStudy(const MultibodyDynamicsStudy&);
    MultibodyDynamicsStudy& operator=(const MultibodyDynamicsStudy&);
    ~MultibodyDynamicsStudy();

    MultibodyDynamicsStudy(const MultibodySystem&);

    const MultibodySystem& getMultibodySystem() const;

    void advanceTimeBy(const Real& h); //TODO

    SimTK_PIMPL_DOWNCAST(MultibodyDynamicsStudy, Study);
};


} // namespace SimTK

#endif // SimTK_SIMBODY_MULTIBODY_SYSTEM_H_
