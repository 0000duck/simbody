#ifndef SimTK_SIMBODY_MULTIBODY_SYSTEM_H_
#define SimTK_SIMBODY_MULTIBODY_SYSTEM_H_

/* Copyright (c) 2006 Stanford University and Michael Sherman.
 * Contributors:
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish, 
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject
 * to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS, CONTRIBUTORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include "SimTKcommon.h"
#include "simbody/internal/common.h"
#include "simbody/internal/State.h"
#include "simbody/internal/System.h"

#include <vector>

namespace SimTK {

class AnalyticGeometry;
class DecorativeGeometry;

class MechanicalForcesSubsystem;

/// The still-abstract parent of all MechanicalSubsystems (such as the
/// one generated by Simbody). This is derived from Subsystem.
class SimTK_SIMBODY_API MechanicalSubsystem : public Subsystem {
public:
    MechanicalSubsystem() { }

    // Topological information (no state)
    int getNBodies()      const;    // includes ground, also # tree joints+1
    int getNConstraints() const;    // i.e., constraint elements (multiple equations)

    int        getParent  (int bodyNum) const;
    Array<int> getChildren(int bodyNum) const;

    const Transform&  getJointFrame(const State&, int bodyNum) const;
    const Transform&  getJointFrameOnParent(const State&, int bodyNum) const;

    const Vec3&       getBodyCenterOfMass(const State&, int bodyNum) const;

    // Kinematic information.
    const Transform&  getBodyConfiguration(const State&, int bodyNum) const;
    const SpatialVec& getBodyVelocity(const State&, int bodyNum) const;

    void realizeParameters   (const State&) const;
    void realizeTime         (const State&) const;
    void realizeConfiguration(const State&) const;
    void realizeMotion       (const State&) const;
    void realizeDynamics     (const State&, const MechanicalForcesSubsystem&) const;
    void realizeReaction     (const State&, const MechanicalForcesSubsystem&) const;

    const Real& getJointQ(const State&, int body, int axis) const;
    const Real& getJointU(const State&, int body, int axis) const;

    void setJointQ(State&, int body, int axis, const Real&) const;
    void setJointU(State&, int body, int axis, const Real&) const;

    SimTK_PIMPL_DOWNCAST(MechanicalSubsystem, Subsystem);
private:
    class MechanicalSubsystemRep& updRep();
    const MechanicalSubsystemRep& getRep() const;
};

class SimTK_SIMBODY_API MechanicalForcesSubsystem : public Subsystem {
public:
    MechanicalForcesSubsystem() { }

    void realizeParameters   (const State&, const MechanicalSubsystem&) const;
    void realizeTime         (const State&, const MechanicalSubsystem&) const;
    void realizeConfiguration(const State&, const MechanicalSubsystem&) const;
    void realizeMotion       (const State&, const MechanicalSubsystem&) const;
    void realizeDynamics     (const State&, const MechanicalSubsystem&) const;
    void realizeReaction     (const State&, const MechanicalSubsystem&) const;

    SimTK_PIMPL_DOWNCAST(MechanicalForcesSubsystem, Subsystem);
private:
    class MechanicalForcesSubsystemRep& updRep();
    const MechanicalForcesSubsystemRep& getRep() const;
};

/**
 * This is a concrete subsystem which applies no forces.
 */
class SimTK_SIMBODY_API EmptyForcesSubsystem : public MechanicalForcesSubsystem {
public:
    EmptyForcesSubsystem();

    // These are just the defaults but are nice to have explicitly for debugging.
    ~EmptyForcesSubsystem() {
    }
    EmptyForcesSubsystem(const EmptyForcesSubsystem& e) 
      : MechanicalForcesSubsystem(e) {
    }
    EmptyForcesSubsystem& operator=(const EmptyForcesSubsystem& e) {
        MechanicalForcesSubsystem::operator=(e);
        return *this;
    }


    SimTK_PIMPL_DOWNCAST(EmptyForcesSubsystem, MechanicalForcesSubsystem);
private:
    class EmptyForcesSubsystemRep& updRep();
    const EmptyForcesSubsystemRep& getRep() const;
};

/**
 * The job of the MultibodySystem class is to coordinate the activities of a
 * MechanicalSubsystem and a MechanicalForcesSubsystem.
 */
class SimTK_SIMBODY_API MultibodySystem : public System {
public:
    MultibodySystem() { }
    MultibodySystem(const MechanicalSubsystem& m, const MechanicalForcesSubsystem& f);

    const MechanicalSubsystem&       getMechanicalSubsystem()       const;
    const MechanicalForcesSubsystem& getMechanicalForcesSubsystem() const;

    // TODO: camera facing, screen fixed, calculated geometry (e.g. line between stations
    // on two different bodies, marker at system COM)
    void addAnalyticGeometry  (int body, const Transform& X_BG, const AnalyticGeometry&);
    void addDecorativeGeometry(int body, const Transform& X_BG, const DecorativeGeometry&);
    const Array<AnalyticGeometry>&   getBodyAnalyticGeometry(int body);
    const Array<DecorativeGeometry>& getBodyDecorativeGeometry(int body);

    void realizeConstruction(State& s) const;
    void realizeModeling(State& s) const;
    void realizeParameters(const State& s) const;
    void realizeTime(const State& s) const;
    void realizeConfiguration(const State& s) const;
    void realizeMotion(const State& s) const;
    void realizeDynamics(const State& s) const;
    void realizeReaction(const State& s) const;

    SimTK_PIMPL_DOWNCAST(MultibodySystem, System);
};

class SimTK_SIMBODY_API MultibodyDynamicsStudy : public Study {
public:
    MultibodyDynamicsStudy() { }
    MultibodyDynamicsStudy(const MultibodyDynamicsStudy&);
    MultibodyDynamicsStudy& operator=(const MultibodyDynamicsStudy&);
    ~MultibodyDynamicsStudy();

    MultibodyDynamicsStudy(const MultibodySystem&);

    const MultibodySystem& getMultibodySystem() const;

    void advanceTimeBy(const Real& h); //TODO

    SimTK_PIMPL_DOWNCAST(MultibodyDynamicsStudy, Study);
};


} // namespace SimTK

#endif // SimTK_SIMBODY_MULTIBODY_SYSTEM_H_
